@page "/survey-list"
@using OIG.Survey.BLL.Services
@using OIG.Survey.DLL.Models
@attribute [StreamRendering]

<PageTitle>Surveys</PageTitle>

<h1>Surveys</h1>

<p>This component demonstrates showing survey data.</p>

@if (surveys != null )
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Owner</th>
                <th>Actions</th>
            </tr>
        </thead>
        @* <tbody>
            @foreach (var survey in surveys)
            {
                <tr>
                    <td>@survey.StartDate.ToShortDateString()</td>
                    <td>@survey.EndDate.ToShortDateString()</td>
                    <td>@survey.Status</td>
                    <td>@survey.Owner.UserName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSurvey(survey.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteSurvey(survey.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody> *@
        <tbody>
            {
                <tr>
                    <td>test</td>
                    <td>test</td>
                    <td>test</td>
                    <td>test</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSurvey()">Edit</button>
                        <button class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<EditSurveyModal @ref="editSurveyModal" Survey="selectedSurvey" OnClose="ReloadSurveys" />

@code {
    private List<SurveySession>? surveys;
    private SurveySession? selectedSurvey;
    private EditSurveyModal? editSurveyModal;

    [Inject]
    private SurveyService SurveyService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        surveys = await SurveyService.GetSurveys();
    }

    private void EditSurvey()
    {
        selectedSurvey = null;
        editSurveyModal?.ShowModal();
    }

    private async Task DeleteSurvey(Guid id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this survey?");
        if (confirmed)
        {
            await SurveyService.DeleteSurvey(id);
            await ReloadSurveys();
        }
    }

    private async Task ReloadSurveys()
    {
        surveys = await SurveyService.GetSurveys();
        StateHasChanged();
    }
}
