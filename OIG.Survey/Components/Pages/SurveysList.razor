@page "/survey-list"
@using OIG.Survey.BLL.Services
@using OIG.Survey.DLL.Models
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Surveys</PageTitle>

<h1>Surveys</h1>

<p>This component demonstrates showing survey data.</p>

@if (surveys == null )
{
    <p><em>Loading...</em></p>
}
else
{
@*     <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Owner</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var survey in surveys)
            {
                <tr>
                    <td>@survey.Name</td>
                    <td>@survey.StartDate</td>
                    <td>@survey.EndDate</td>
                    <td>@survey.Status</td>
                    <td>@survey.Owner.UserName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSurvey(survey)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteSurvey(survey.Id)">Delete</button> 
                    </td>
                </tr>
            }
        </tbody>
    </table> *@

    <Grid TItem="SurveySession"
          Class="table table-hover table-bordered table-striped"
          AllowRowClick="true"
          DataProvider="EmployeesDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          OnRowClick="OnRowClick"
          Responsive="true">

        <GridColumns>
            <GridColumn TItem="SurveySession" HeaderText="Name" PropertyName="Name" SortString="Name" SortKeySelector="item => item.Name">
                @context.Name
            </GridColumn>

            <GridColumn TItem="SurveySession" HeaderText="StartDate" PropertyName="StartDate" SortKeySelector="item => item.StartDate">
                @context.StartDate
            </GridColumn>

            <GridColumn TItem="SurveySession" HeaderText="EndDate" PropertyName="EndDate" SortKeySelector="item => item.EndDate">
                @context.EndDate
            </GridColumn>

            <GridColumn TItem="SurveySession" HeaderText="Status" PropertyName="Status" >
                @context.Status
            </GridColumn>
            <GridColumn TItem="SurveySession" HeaderText="UserName" Filterable="false" PropertyName="UserName" SortString="UserName" SortKeySelector="item => item.Owner.UserName">
                @context.Owner.UserName
            </GridColumn>
        </GridColumns>

    </Grid>

}

<Modal @ref="modal2" Title="Modal title">
    <BodyTemplate>
        Modal body text goes here.
    </BodyTemplate>
</Modal>


@code {
    private List<SurveySession>? surveys;
    private SurveySession? selectedSurvey;

    [Inject]
    private SurveyService SurveyService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        surveys = await SurveyService.GetSurveys();
    }


    private async Task DeleteSurvey(Guid id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this survey?");
        if (confirmed)
        {
            await SurveyService.DeleteSurvey(id);
            await ReloadSurveys();
        }
    }

    private async Task ReloadSurveys()
    {
        surveys = await SurveyService.GetSurveys();
        StateHasChanged();
    }

    private Modal modal = default!;
    private Modal modal2 = default!;

    private async Task OnShowModalClick()
    {
        await modal2.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal2.HideAsync();
    }

    [Parameter]
    public SurveySession Survey { get; set; }

    private async Task<GridDataProviderResult<SurveySession>> EmployeesDataProvider(GridDataProviderRequest<SurveySession> request)
    {
        if (surveys is null) // pull employees only one time for client-side filtering, sorting, and paging
            surveys = await SurveyService.GetSurveys(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(surveys));
    }

    private async Task OnRowClick(GridRowEventArgs<SurveySession> args)
    {
        Dictionary<string, object> dictionary = new Dictionary<string, object>();
        var parameters = dictionary;
        parameters.Add("SurveyId", args.Item.Id);
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, OnHideModalClick));
        await modal2.ShowAsync<EditSurveyModal>("Employee Details", null, parameters);
    }
}
