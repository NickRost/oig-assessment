@using OIG.Survey.BLL.Services
@using OIG.Survey.DLL.Models
@inject SurveyService SurveyService

<div class="modal fade show" tabindex="-1" style="display: @(IsVisible ? "block" : "none")" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Survey</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Survey" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="Survey.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <InputDate id="endDate" class="form-control" @bind-Value="Survey.EndDate" />
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect id="status" class="form-control" @bind-Value="Survey.Status">
                            @foreach (var status in Enum.GetValues<SurveyStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SurveySession Survey { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    public bool IsVisible { get; set; }

    public void ShowModal()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        //await SurveyService.UpdateSurvey(Survey);
        await OnClose.InvokeAsync();
        CloseModal();
    }
}
